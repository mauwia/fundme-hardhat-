{
  "address": "0x8CaBB758E370ED9c3872b3D0E69b365De87c0C21",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3b2099e206d3059e810a1811c3b4b98d656ffdb4de1aa6637621ee3f19380bcb",
  "receipt": {
    "to": null,
    "from": "0xCD02feDc82139DfD5F638D3bBB753c109B90b553",
    "contractAddress": "0x8CaBB758E370ED9c3872b3D0E69b365De87c0C21",
    "transactionIndex": 19,
    "gasUsed": "880253",
    "logsBloom": "0x
    "blockHash": "0xf3d5c4c1ac4a7dfe91758d7cfc316a796dc139bb622f153717c46b3807784b2b",
    "transactionHash": "0x3b2099e206d3059e810a1811c3b4b98d656ffdb4de1aa6637621ee3f19380bcb",
    "logs": [],
    "blockNumber": 11010320,
    "cumulativeGasUsed": "8075384",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "45e0caa79d0e2396f22ce648b9a2088e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundme.sol\":\"fundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/Fundme.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity 0.8.8;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\ncontract fundMe{\\n    uint256 public constant minimumUsd=50*1e18;\\n    address[] public funders;\\n    mapping(address=>uint256) public addressToAmountFunded;\\n    address public immutable owner;\\n    AggregatorV3Interface public priceFeed;\\n    using PriceConverter for uint256;\\n    constructor(address priceFeedAddress){\\n        owner=msg.sender;\\n        priceFeed=AggregatorV3Interface(priceFeedAddress);\\n    }\\n    function fund() public payable{\\n         require(msg.value.getConversionRate(priceFeed)>minimumUsd,\\\"Didn't send enough\\\");\\n         funders.push(msg.sender);\\n         addressToAmountFunded[msg.sender]=msg.value;\\n    }\\n    \\n   \\n    function withdraw() public onlyOwner {\\n        for(uint256 fundIndex=0;fundIndex<funders.length;fundIndex++){\\n            address funder=funders[fundIndex];\\n            addressToAmountFunded[funder]=0;\\n        }\\n        funders= new address[](0);\\n        (bool callSuccess,)=payable(msg.sender).call{value:address(this).balance}(\\\"\\\");\\n        require(callSuccess,\\\"Call failed\\\");\\n    }\\n    modifier onlyOwner{\\n        require(msg.sender==owner,\\\"Sender is not owner\\\");\\n        _;\\n    }\\n    receive() external payable{\\n        fund();\\n    }\\n    fallback() external payable{\\n        fund();\\n    }\\n}\",\"keccak256\":\"0x10ff11fe6123fef0511dd75e32ee792af89e139ccaba6b313e551fd9dbca3194\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n      \\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xfb7e747f39e0059e5c9d2d8880ee66345c8e1c18e30b21ade92232659daea598\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c5780638da5cb5b14610137578063b60d428814610162578063dc0d3dff1461016c57610083565b8063098de8201461008d5780633ccfd60b146100b85780633e47d6f3146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b6040516100af9190610764565b60405180910390f35b3480156100c457600080fd5b506100cd6102de565b005b3480156100db57600080fd5b506100f660048036038101906100f191906107e2565b610527565b6040516101039190610764565b60405180910390f35b34801561011857600080fd5b5061012161053f565b60405161012e919061086e565b60405180910390f35b34801561014357600080fd5b5061014c610565565b6040516101599190610898565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e91906108df565b610589565b6040516101a09190610898565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c890919063ffffffff16565b11610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610969565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610363906109d5565b60405180910390fd5b60005b600080549050811015610417576000808281548110610391576103906109f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040f90610a53565b91505061036f565b50600067ffffffffffffffff81111561043357610432610a9c565b5b6040519080825280602002602001820160405280156104615781602001602082028036833780820191505090505b50600090805190602001906104779291906106a4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049e90610afc565b60006040518083038185875af1925050503d80600081146104db576040519150601f19603f3d011682016040523d82523d6000602084013e6104e0565b606091505b5050905080610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b90610b5d565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d483610604565b90506000670de0b6b3a764000085836105ed9190610b7d565b6105f79190610c06565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064d57600080fd5b505afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610cc4565b5050509150506402540be4008161069c9190610d3f565b915050919050565b82805482825590600052602060002090810192821561071d579160200282015b8281111561071c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c4565b5b50905061072a919061072e565b5090565b5b8082111561074757600081600090555060010161072f565b5090565b6000819050919050565b61075e8161074b565b82525050565b60006020820190506107796000830184610755565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107af82610784565b9050919050565b6107bf816107a4565b81146107ca57600080fd5b50565b6000813590506107dc816107b6565b92915050565b6000602082840312156107f8576107f761077f565b5b6000610806848285016107cd565b91505092915050565b6000819050919050565b600061083461082f61082a84610784565b61080f565b610784565b9050919050565b600061084682610819565b9050919050565b60006108588261083b565b9050919050565b6108688161084d565b82525050565b6000602082019050610883600083018461085f565b92915050565b610892816107a4565b82525050565b60006020820190506108ad6000830184610889565b92915050565b6108bc8161074b565b81146108c757600080fd5b50565b6000813590506108d9816108b3565b92915050565b6000602082840312156108f5576108f461077f565b5b6000610903848285016108ca565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b600061095360128361090c565b915061095e8261091d565b602082019050919050565b6000602082019050818103600083015261098281610946565b9050919050565b7f53656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b60006109bf60138361090c565b91506109ca82610989565b602082019050919050565b600060208201905081810360008301526109ee816109b2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a5e8261074b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a9157610a90610a24565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ae6600083610acb565b9150610af182610ad6565b600082019050919050565b6000610b0782610ad9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b47600b8361090c565b9150610b5282610b11565b602082019050919050565b60006020820190508181036000830152610b7681610b3a565b9050919050565b6000610b888261074b565b9150610b938361074b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bcc57610bcb610a24565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c118261074b565b9150610c1c8361074b565b925082610c2c57610c2b610bd7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c5681610c37565b8114610c6157600080fd5b50565b600081519050610c7381610c4d565b92915050565b6000819050919050565b610c8c81610c79565b8114610c9757600080fd5b50565b600081519050610ca981610c83565b92915050565b600081519050610cbe816108b3565b92915050565b600080600080600060a08688031215610ce057610cdf61077f565b5b6000610cee88828901610c64565b9550506020610cff88828901610c9a565b9450506040610d1088828901610caf565b9350506060610d2188828901610caf565b9250506080610d3288828901610c64565b9150509295509295909350565b6000610d4a82610c79565b9150610d5583610c79565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d9457610d93610a24565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dd157610dd0610a24565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0e57610e0d610a24565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4b57610e4a610a24565b5b82820290509291505056fea264697066735822122047e480f724db8c605a09f5296cd4143bd79143bd478b256dca299e560ca4bb1064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/Fundme.sol:fundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 61,
        "contract": "contracts/Fundme.sol:fundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 66,
        "contract": "contracts/Fundme.sol:fundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}