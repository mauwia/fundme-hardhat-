{
  "language": "Solidity",
  "sources": {
    "contracts/Fundme.sol": {
      "content": "//SPDX-License-Identifier:MIT\npragma solidity 0.8.8;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\ncontract fundMe{\n    uint256 public constant minimumUsd=50*1e18;\n    address[] public funders;\n    mapping(address=>uint256) public addressToAmountFunded;\n    address public immutable owner;\n    AggregatorV3Interface public priceFeed;\n    using PriceConverter for uint256;\n    constructor(address priceFeedAddress){\n        owner=msg.sender;\n        priceFeed=AggregatorV3Interface(priceFeedAddress);\n    }\n    function fund() public payable{\n         require(msg.value.getConversionRate(priceFeed)>minimumUsd,\"Didn't send enough\");\n         funders.push(msg.sender);\n         addressToAmountFunded[msg.sender]=msg.value;\n    }\n    \n   \n    function withdraw() public onlyOwner {\n        for(uint256 fundIndex=0;fundIndex<funders.length;fundIndex++){\n            address funder=funders[fundIndex];\n            addressToAmountFunded[funder]=0;\n        }\n        funders= new address[](0);\n        (bool callSuccess,)=payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(callSuccess,\"Call failed\");\n    }\n    modifier onlyOwner{\n        require(msg.sender==owner,\"Sender is not owner\");\n        _;\n    }\n    receive() external payable{\n        fund();\n    }\n    fallback() external payable{\n        fund();\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// Why is this a library and not abstract?\n// Why not an interface?\nlibrary PriceConverter {\n    // We could make this public, but then we'd have to deploy it\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        // Rinkeby ETH / USD Address\n        // https://docs.chain.link/docs/ethereum-addresses/\n      \n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(answer * 10000000000);\n    }\n\n    // 1000000000\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\n        return ethAmountInUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}